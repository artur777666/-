
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = '7861693671:AAEyzNuFC72PWJLqHFycNTJyODYHG70VMq8'
YOUR_ADMIN_ID = 302435472

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}
shifts = {}
plans = {}
results = {}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üïí –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"))
main_kb.add(KeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É"))
main_kb.add(KeyboardButton("üìä –û—Ç—á—ë—Ç"))
main_kb.add(KeyboardButton("üìå –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"))
main_kb.add(KeyboardButton("üìà –û—Ç—á–∏—Ç–∞—Ç—å—Å—è"))

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.add(KeyboardButton("üìå –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω"))
admin_kb.add(KeyboardButton("üìã –í—Å–µ –æ—Ç—á—ë—Ç—ã"))
admin_kb.add(KeyboardButton("üìÖ –í—Å–µ —Å–º–µ–Ω—ã"))
admin_kb.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = message.from_user.full_name
    if user_id == YOUR_ADMIN_ID:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_kb)
    else:
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Å–º–µ–Ω –∏ –∑–∞–¥–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üïí –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(message: types.Message):
    user_id = message.from_user.id
    if user_id not in shifts or shifts[user_id]['end'] is not None:
        shifts[user_id] = {'start': datetime.now(), 'end': None}
        await message.reply("–°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å ‚úÖ")
    else:
        await message.reply("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞!")

@dp.message_handler(lambda msg: msg.text == "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")
async def end_shift(message: types.Message):
    user_id = message.from_user.id
    if user_id in shifts and shifts[user_id]['end'] is None:
        shifts[user_id]['end'] = datetime.now()
        duration = shifts[user_id]['end'] - shifts[user_id]['start']
        await message.reply(f"–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")

@dp.message_handler(lambda msg: msg.text == "üìä –û—Ç—á—ë—Ç")
async def report(message: types.Message):
    user_id = message.from_user.id
    if user_id in shifts:
        shift = shifts[user_id]
        start = shift['start'].strftime('%Y-%m-%d %H:%M') if shift['start'] else '‚Äî'
        end = shift['end'].strftime('%Y-%m-%d %H:%M') if shift['end'] else '‚Äî'
        result = results.get(user_id, '–ù–µ –æ—Ç—á–∏—Ç–∞–ª—Å—è')
        plan = plans.get(user_id, '–ù–µ—Ç –ø–ª–∞–Ω–∞')
        await message.reply(f"–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞:\n–ù–∞—á–∞–ª–æ: {start}\n–ö–æ–Ω–µ—Ü: {end}\n–ü–ª–∞–Ω: {plan}\n–û—Ç—á—ë—Ç: {result}")
    else:
        await message.reply("–î–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö –Ω–µ—Ç.")

@dp.message_handler(lambda msg: msg.text == "üìå –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å")
async def set_plan(message: types.Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        await message.reply("–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π 'üìå –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω' –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    else:
        plan = plans.get(message.from_user.id, '–ù–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å.')
        await message.reply(f"–¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{plan}")

@dp.message_handler(lambda msg: msg.text == "üìà –û—Ç—á–∏—Ç–∞—Ç—å—Å—è")
async def get_report(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞ —Å–º–µ–Ω—É")
    @dp.message_handler()
    async def save_report(msg: types.Message):
        results[msg.from_user.id] = msg.text
        await msg.reply("–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ!")

@dp.message_handler(lambda msg: msg.text == "üìå –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω")
async def admin_plan_update(message: types.Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        await message.reply("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        @dp.message_handler()
        async def save_plan(msg: types.Message):
            for uid in users:
                plans[uid] = msg.text
            await msg.reply("–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

@dp.message_handler(lambda msg: msg.text == "üìã –í—Å–µ –æ—Ç—á—ë—Ç—ã")
async def all_reports(message: types.Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        text = "üìù –û—Ç—á—ë—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        for uid, report in results.items():
            name = users.get(uid, '–ë–µ–∑ –∏–º–µ–Ω–∏')
            text += f"\n{name}: {report}"
        await message.reply(text or "–û—Ç—á—ë—Ç–æ–≤ –Ω–µ—Ç.")

@dp.message_handler(lambda msg: msg.text == "üìÖ –í—Å–µ —Å–º–µ–Ω—ã")
async def all_shifts(message: types.Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        text = "üìÖ –°–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        for uid, shift in shifts.items():
            name = users.get(uid, '–ë–µ–∑ –∏–º–µ–Ω–∏')
            start = shift['start'].strftime('%Y-%m-%d %H:%M') if shift['start'] else '‚Äî'
            end = shift['end'].strftime('%Y-%m-%d %H:%M') if shift['end'] else '‚Äî'
            text += f"\n{name}: {start} ‚Äî {end}"
        await message.reply(text or "–°–º–µ–Ω –Ω–µ—Ç.")

@dp.message_handler(lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        await message.reply("–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_kb)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
